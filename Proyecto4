#Importamos las herramientas necesarias para realizar las gráficas y las operaciones
from IPython.core.display import Image
import matplotlib
from pylab import *

#Inicialización de valores 
n = 50    #Tamaño de las gráficas nxn
p = 0.5   #Probabilidad pánico
NoMin = 1 #Número mínimo de vecinos excitados
k = 4     #Refractario

Steps = 10; Images = int(Steps/5) #Iteraciones

config = zeros([n + 2, n + 2]) #Cerrado

#Funciones necesarias para:
#Inicializar el arreglo de espacios inactivos (0) y con p determinar excitabilidad (1)
def initialize():
  global config, nextconfig, function
  config = zeros([n + 2, n + 2])
  function = []
  for x in range(1, n + 1):
    for y in range(1, n + 1):
      config[x, y] = 1 if random() < p else 0
  nextconfig = zeros([n + 2, n + 2])

#Unificación de las reglas para el seguimiento del modelo
def update():
  global config, nextconfig, t, NoMin, n, k, function
  nextconfig[:,:] = config[:,:]
  prom = 0
  for x in range(n):
    for y in range(n):
      count = 0
      for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
          if abs(dx) + abs(dy) != 0:
            if config[(x+dx),(y+dy)] == 1:
              count += 1
      prom = prom + (count)        
      if config[x, y] == 0 and count >= NoMin:
        nextconfig[x, y] = 1
      if config[x, y] == 1 :
        nextconfig[x, y] = config[x, y]+1 
      if config[x, y] == k :
        nextconfig[x, y] = 0
  function.append(prom/(n*n))      
  nextconfig = config
  
#Añadir cada resultado obtenido de las especificaciones del modelo
def observe():
  global config, function
  cla() 
  imshow(config, vmin = 0, vmax = 1, cmap = cm.viridis)


#Visualizar gráficas
plt.subplots(figsize = (12, 12)); plt.suptitle("p = 0.5 - k = 4", fontsize = 18, y = 0.95)
initialize(); i = 0
for t in range(Steps + 1):
  if t % Images == 0:
    i = i + 1; subplot(2, 3, i); observe()
    title('t = '+str(t)); ylabel('y', size = 20); xlabel('x', size = 20)
  update()
show()

fig3 = plot(function,'o-')
plt.xlabel('t');plt.ylabel('a(t)')
show()
